import time

import telebot
from telebot import types
import database
import datetime
import sys
bot = telebot.TeleBot('5186990720:AAGKBumrpZVQJ46vP-OHLdm5M3og3id8f3k')
print("Start")

userData = {}


def initName(username, firstname):
    if username==None:
        return firstname
    else:
        return "@"+username

def get_question(message):
    try:
        if str(message.text) and (message.text).startswith( '/start' ):
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_newQuestion = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', callback_data="new_question")
            btn_stop = types.InlineKeyboardButton(text='–£ –º–µ–Ω—è –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data="stop_msg")
            markup.add(btn_newQuestion, btn_stop)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=markup)
        else:
            bot.send_message(userData[message.from_user.id]["recipientUserId"], "<b>–í–∞–º –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"+
                                                                                message.text ,parse_mode="html")

            bot.send_message(-1001757722319, f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                                             f"<i><b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b></i>\n\n"
                                             f"<b>firstname:</b> {message.from_user.first_name}\n"
                                             f"<b>username:</b> {initName(message.from_user.username, message.from_user.first_name)}\n"
                                             f"<b>userid:</b> {str(message.from_user.id)}\n\n"
                                             f"<i><b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b></i>\n\n"
                                             "<b>firstname:</b> "+userData[message.from_user.id]["recipientFirstname"]+"\n"
                                             "<b>username:</b> "+userData[message.from_user.id]["recipientUsername"]+"\n"
                                             "<b>userid:</b> "+str(userData[message.from_user.id]["recipientUserId"])+"\n\n"
                                             f"<i><b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b></i>\n{message.text}\n\n"
                                             f"<i><b>–î–∞—Ç–∞/–í—Ä–µ–º—è: </b></i>{datetime.datetime.now()}"
                             ,parse_mode="html")

            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_newQuestion = types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å', callback_data="new_question")
            btn_stop = types.InlineKeyboardButton(text='–£ –º–µ–Ω—è –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data="stop_msg")
            markup.add(btn_newQuestion,btn_stop)
            database.add_question(firstname=message.from_user.first_name,
                                  username=initName(message.from_user.username, message.from_user.first_name),
                                  userid=message.from_user.id,
                                  recipientFirstname= userData[message.from_user.id]["recipientFirstname"],
                                  recipientUsername=userData[message.from_user.id]["recipientUsername"],
                                  recipientUserId = userData[message.from_user.id]["recipientUserId"],
                                  question=message.text,
                                  time=str(datetime.datetime.now()))

            bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ, —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.\n\n"
                                              "–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è "+ userData[message.chat.id]["recipientUsername"]+"?", reply_markup=markup)
    except TypeError:
        e = sys.exc_info()[1]
        print(e.args[0])
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_newQuestion = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', callback_data="new_question")
        markup.add(btn_newQuestion)
        bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. (–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)", reply_markup=markup)



@bot.message_handler(commands=['start' ,'share'])
def start(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <b>–ø—Ä–∏–≤–∞—Ç–Ω–æ–º</b> —á–∞—Ç–µ!",parse_mode="html")
        return
    database.add_user(initName(message.from_user.username, message.from_user.first_name),message.chat.id)
    if message.text != "/start" and message.text != "/share":
        try:
            recipientData = bot.get_chat(int(message.text[7:]))
            userData[message.from_user.id] = {"fromUserId": message.from_user.id,
                                              "fromUsername": initName(message.from_user.username, message.from_user.first_name),
                                              "recipientFirstname":recipientData.first_name,
                                              "recipientUsername": initName(recipientData.username, recipientData.first_name),
                                              "recipientUserId": recipientData.id}
            bot.register_next_step_handler(
                bot.send_message(message.chat.id,f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {initName(recipientData.username, recipientData.first_name)} –∏ –æ–Ω–æ –±—É–¥–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ!\n\n"
                                          f"–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –≤—Å–µ, —á—Ç–æ –æ –Ω–µ–º –¥—É–º–∞–µ—à—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π –æ–Ω –µ–≥–æ –ø–æ–ª—É—á–∏—Ç, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ –æ–Ω–æ."),
                                           get_question)
        except :
            bot.send_message(message.chat.id, "<b>–û—à–∏–±–∫–∞</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                                                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",parse_mode="html")
    else:
        bot.send_message(message.chat.id,"<b>–ü—Ä–∏–≤–µ—Ç</b> üëã\n\n"
"–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –†–∞–∑–º–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É —É —Å–µ–±—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è <b>Instagram/Telegram/VK</b> –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ üëá\n\n"
f"https://t.me/anonim_msg_bot?start={message.chat.id}\n\n"
"–°—Å—ã–ª–∫—É –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –≤–æ—Ç —Ç–∞–∫.\n"
"–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b>¬ª\n", parse_mode="html" )

@bot.callback_query_handler(func=lambda call: True)
def inlin(call):
    if call.data == "new_question":
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(
                bot.send_message(call.from_user.id,
                                 f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è " + userData[call.from_user.id]["recipientUsername"]+ " –∏ –æ–Ω–æ –±—É–¥–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ!\n\n"
                                 f"–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –≤—Å–µ, —á—Ç–æ –æ –Ω–µ–º –¥—É–º–∞–µ—à—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π –æ–Ω –µ–≥–æ –ø–æ–ª—É—á–∏—Ç, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ –æ–Ω–æ."),
                get_question)
        except KeyError:
            e = sys.exc_info()[1]
            print(e.args[0])
            bot.send_message(call.message.chat.id, "<b>–û—à–∏–±–∫–∞</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                                                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",parse_mode="html")
    elif call.data == "stop_msg":
        try:

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "+ initName(userData[call.message.chat.id]["recipientUsername"][1:] ,userData[call.message.chat.id]["recipientFirstname"]))
            del userData[call.message.chat.id]["recipientUsername"]
            del userData[call.message.chat.id]["recipientFirstname"]
            del userData[call.message.chat.id]["recipientUserId"]
        except KeyError:
            e = sys.exc_info()[1]
            print(e.args[0])
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id,
                             "<b>–û—à–∏–±–∫–∞</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", parse_mode="html")

    elif call.data == "startMailning":
        bot.delete_message(call.message.chat.id, call.message.id)
        users_id = database.get_all_userid()
        for userId in users_id:
            bot.send_photo(userId, photo=mailingPhoto, caption=mailingText)
        bot.send_message(call.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")

    elif call.data == "startMailningText":
        bot.delete_message(call.message.chat.id, call.message.id)
        users_id = database.get_all_userid()
        for userId in users_id:
            bot.send_message(userId, mailingText2)
        bot.send_message(call.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")

@bot.message_handler(commands=['mailing'])
def mailing(message):
    del mailingText, mailingPhoto
    if message.from_user.id == 502391525:
        bot.register_next_step_handler(
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), mailing2
        )
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")

def mailing2(message):
    global mailingText
    mailingText = message.text
    bot.register_next_step_handler(
        bot.send_message(message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:"), mailing3
    )
def mailing3(message):
    global mailingPhoto
    try:
        photo_id = message.photo[-1].file_id
        photo_file = bot.get_file(photo_id)  # <class 'telebot.types.File'>
        mailingPhoto = bot.download_file(photo_file.file_path)  # <class 'bytes'>
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_confirmMailning = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="startMailning")
        markup.add(btn_confirmMailning)
        bot.send_photo(message.from_user.id, photo= mailingPhoto, caption= mailingText,reply_markup=markup)
    except:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–°—É–¥—è –ø–æ –≤—Å–µ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")


@bot.message_handler(commands=['mailing_text'])
def mailingText(message):
    if message.from_user.id == 502391525:
        bot.register_next_step_handler(
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), mailingText2
        )
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")

def mailingText2(message):
    global mailingText2
    mailingText2 = message.text
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_confirmMailning = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="startMailningText")
    markup.add(btn_confirmMailning)
    bot.send_message(message.from_user.id, mailingText2, reply_markup=markup)




if __name__ == '__main__':
    database.init_db()
    bot.polling(none_stop=True)